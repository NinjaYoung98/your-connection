################

# 1. Commit 메시지 구조

# 기본 적인 커밋 메시지 구조는 제목,본문,꼬리말 세가지 파트로 나누고, 각 파트는 빈줄을 두어 구분한다.
# type : subject
# body
# footer(필수사항 x)

################

# 2. Commit Type

# feat : 새로운 기능 추가
# fix : 버그 수정
# docs : 문서 작성 및 수정
# style : 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
# refactor : 코드 리팩토링
# test : 테스트 코드, 리펙토링 테스트 코드 추가
# chore : 빌드 업무 수정, 패키지 매니저 수정

################

# 3. Subject

# [이슈넘버]<타입> : <제목> 의 형식으로 작성
# 제목은 50자 이내 / 끝에 마침표 금지
# 예) [#1]feat : 로그인 기능 추가

################

# 4. Body

# 본문은 한 줄 당 72자 내로 작성한다.
# 본문 내용은 양에 구애받지 않고 최대한 상세히 작성한다.
# 본문 내용은 어떻게 변경했는지 보다 무엇을 변경했는지 또는 왜 변경했는지를 설명한다.


################

# 5. footer

# 꼬리말은 optional이고 이슈 트래커 ID를 작성한다.
# 꼬리말은 "유형: #이슈 번호" 형식으로 사용한다.
# 여러 개의 이슈 번호를 적을 때는 쉼표(,)로 구분한다.
# 이슈 트래커 유형은 다음 중 하나를 사용한다.
    - Fixes : 이슈 수정중 (아직 해결되지 않은 경우)
    - Resolves : 이슈를 해결했을 때 사용
    - Ref : 참고할 이슈가 있을 때 사용
    - Related to : 해당 커밋에 관련된 이슈번호 (아직 해결되지 않은 경우)
   ex) Fixes : #45 Related to: #34, #23

################

6. Commit 예시

# feat : "회원 가입 기능 구현"

# SMS, 이메일 중복확인 API 개발

# Resolves : #123
# Ref : #456
# Related to : #48, #45